// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(CatalogueDbContext))]
    [Migration("20240429180727_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Catalogues.Entities.Catalogue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Catalogues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21bb85b0-811f-42bc-979a-a45b976685dd"),
                            Name = "Repte dels 100 Cims de la FEEC"
                        });
                });

            modelBuilder.Entity("Domain.Catalogues.Entities.Summit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Altitude")
                        .HasColumnType("int")
                        .HasColumnName("Altitude");

                    b.Property<Guid?>("CatalogueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueId");

                    b.HasIndex("DifficultyLevel");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Region");

                    b.ToTable("Summits", (string)null);
                });

            modelBuilder.Entity("Persistence.Data.EnumLookup<Domain.Catalogues.Enums.DifficultyLevel>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EnumLookup<DifficultyLevel>");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "EASY",
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "MODERATE",
                            Value = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "DIFFICULT",
                            Value = 3
                        },
                        new
                        {
                            Id = -1,
                            Name = "NONE",
                            Value = -1
                        });
                });

            modelBuilder.Entity("Persistence.Data.EnumLookup<Domain.Catalogues.Enums.Region>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EnumLookup<Region>");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pla de l'Estany",
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Garrotxa",
                            Value = 2
                        },
                        new
                        {
                            Id = -1,
                            Name = "NONE",
                            Value = -1
                        });
                });

            modelBuilder.Entity("Domain.Catalogues.Entities.Summit", b =>
                {
                    b.HasOne("Domain.Catalogues.Entities.Catalogue", null)
                        .WithMany("Summits")
                        .HasForeignKey("CatalogueId");

                    b.HasOne("Persistence.Data.EnumLookup<Domain.Catalogues.Enums.DifficultyLevel>", null)
                        .WithMany()
                        .HasForeignKey("DifficultyLevel")
                        .HasPrincipalKey("Value")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Data.EnumLookup<Domain.Catalogues.Enums.Region>", null)
                        .WithMany()
                        .HasForeignKey("Region")
                        .HasPrincipalKey("Value")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Catalogues.Entities.Catalogue", b =>
                {
                    b.Navigation("Summits");
                });
#pragma warning restore 612, 618
        }
    }
}
